module Operand = Operands.Operand

exception Invalid_instruction of string * string

type t = Types.t option * Opcode.t * Operands.t

let create ty opcode operands : t = (ty, opcode, operands)

let empty : t = (None, Opcode.empty, [])

(* getter *)
let ty_of (ty, _, _) : Types.t option = ty

let opcode (_, opcode, _) : Opcode.t = opcode

let operands (_, _, operands) : Operands.t = operands

let err instr reason =
  Printf.fprintf stderr "Invalid Instruction: %s\n%s\n\n" instr reason;
  raise (Invalid_instruction (instr, reason))

let create_from instr =
  let parse_opcode instr =
    let opcode_reg = Re.Pcre.regexp "#[a-zA-Z0-9]+:([a-zA-Z0-9]+)" in
    let opcode_str =
      try Re.Group.get (Re.exec opcode_reg instr) 1
      with Not_found ->
        let reason = "Cannot match 'opcode' from the instruction." in
        err instr reason
    in

    try opcode_str |> Opcode.of_str
    with Opcode.Invalid_opcode ->
      let reason = "Unknown opcode: " ^ opcode_str in
      err instr reason
  in

  let parse_operands kind instr =
    {parse_operand}

    let kinds = Opcode.split_kind kind in
    [] |> parse_operand kinds instr
  in

  let ty_str_of instr =
    let type_reg = Re.Pcre.regexp "\\[Type: ([^\\]]*)\\]" in
    try Some (Re.Group.get (Re.exec type_reg instr) 1) with Not_found -> None
  in

  let opcode = parse_opcode instr in
  let kind = opcode |> Opcode.get_kind in
  let operands = parse_operands kind instr in
  let ty =
    match ty_str_of instr with
    | Some ty_str -> Some (ty_str |> Types.of_string)
    | None -> None
  in

  create ty opcode operands
